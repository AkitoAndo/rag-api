AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rag-api
  
  S3 Vectorsを使用したRAGシステムのサンプルアプリケーション

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Environment:
      Variables:
        VECTOR_BUCKET_NAME: !Ref VectorBucketName
        VECTOR_INDEX_NAME: !Ref VectorIndexName
        IMAGE_BUCKET_NAME: !Ref ImageBucketName
        IMAGE_TABLE_NAME: !Ref ImageTableName
        USER_QUOTA_TABLE: !Ref UserQuotaTableName
        USER_USAGE_TABLE: !Ref UserUsageTableName
        TEXTRACT_REGION: !Ref AWS::Region
        REKOGNITION_REGION: !Ref AWS::Region

Parameters:
  VectorBucketName:
    Type: String
    Description: S3 Vectorsバケット名
    Default: "20250811-rag"
  
  VectorIndexName:
    Type: String  
    Description: S3 Vectorsインデックス名
    Default: "20250811-rag-vector-index"
  
  ImageBucketName:
    Type: String
    Description: 画像保存用S3バケット名
    Default: "rag-images-bucket"
  
  ImageTableName:
    Type: String
    Description: 画像メタデータ用DynamoDBテーブル名
    Default: "rag-image-metadata"
  
  UserQuotaTableName:
    Type: String
    Description: ユーザークォータ設定用DynamoDBテーブル名
    Default: "rag-user-quotas"
  
  UserUsageTableName:
    Type: String
    Description: ユーザー使用状況用DynamoDBテーブル名
    Default: "rag-user-usage"

Resources:
  # S3 Bucket for image storage
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ImageBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            MaxAge: 3600
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB Table for image metadata
  ImageMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ImageTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: image_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: image_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: created_at-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # DynamoDB Table for user quotas
  UserQuotaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UserQuotaTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # DynamoDB Table for user usage tracking
  UserUsageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UserUsageTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Cognito User Pool
  RAGUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false

  # Cognito User Pool Client
  RAGUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref RAGUserPool
      ClientName: !Sub "${AWS::StackName}-client"
      GenerateSecret: false
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO

  # API Gateway
  RagApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: !Sub "${AWS::StackName}-rag-api"
      Description: "RAG System API Gateway"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt RAGUserPool.Arn
            Identity:
              Header: Authorization
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Lambda Functions
  RAGQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda_handler.lambda_handler
      Events:
        RAGQueryApi:
          Type: Api
          Properties:
            Path: /query
            Method: post
            RestApiId: !Ref RagApiGateway
            Auth:
              Authorizer: NONE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "bedrock:InvokeModel"
                - "s3vectors:GetVectors"
                - "s3vectors:QueryVectors"
              Resource: "*"

  AddDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda_handler.add_document_handler
      Timeout: 300
      Events:
        AddDocumentApi:
          Type: Api
          Properties:
            Path: /add-document
            Method: post
            RestApiId: !Ref RagApiGateway
            Auth:
              Authorizer: NONE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "bedrock:InvokeModel"
                - "s3vectors:PutVectors"
              Resource: "*"

  # Multi-Tenant Lambda Functions
  UserQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: multi_tenant_handlers.user_query_handler
      Events:
        UserQueryApi:
          Type: Api
          Properties:
            Path: /users/{user_id}/query
            Method: post
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "bedrock:InvokeModel"
                - "s3vectors:GetVectors"
                - "s3vectors:QueryVectors"
              Resource: "*"

  UserAddDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: multi_tenant_handlers.user_add_document_handler
      Timeout: 300
      Events:
        UserAddDocumentApi:
          Type: Api
          Properties:
            Path: /users/{user_id}/documents
            Method: post
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "bedrock:InvokeModel"
                - "s3vectors:PutVectors"
              Resource: "*"

  UserDocumentListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: multi_tenant_handlers.user_document_list_handler
      Events:
        UserDocumentListApi:
          Type: Api
          Properties:
            Path: /users/{user_id}/documents
            Method: get
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3vectors:GetVectors"
                - "s3vectors:ListDocuments"
              Resource: "*"

  UserDocumentDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: multi_tenant_handlers.user_document_delete_handler
      Events:
        UserDocumentDeleteApi:
          Type: Api
          Properties:
            Path: /users/{user_id}/documents/{document_id}
            Method: delete
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3vectors:DeleteVectors"
              Resource: "*"

  # Image processing Lambda Functions
  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: image_handlers.image_upload_handler
      Timeout: 300
      MemorySize: 1024
      Events:
        ImageUploadApi:
          Type: Api
          Properties:
            Path: /images
            Method: post
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:DeleteObject"
              Resource: !Sub "arn:aws:s3:::${ImageBucketName}/*"
            - Effect: "Allow"
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:Query"
                - "dynamodb:Scan"
              Resource: 
                - !GetAtt ImageMetadataTable.Arn
                - !GetAtt UserQuotaTable.Arn
                - !GetAtt UserUsageTable.Arn
            - Effect: "Allow"
              Action:
                - "textract:DetectDocumentText"
                - "textract:AnalyzeDocument"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "rekognition:DetectLabels"
                - "rekognition:DetectText"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "bedrock:InvokeModel"
                - "s3vectors:PutVectors"
              Resource: "*"

  ImageListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: image_handlers.image_list_handler
      Events:
        ImageListApi:
          Type: Api
          Properties:
            Path: /images
            Method: get
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:Scan"
              Resource: !GetAtt ImageMetadataTable.Arn

  ImageDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: image_handlers.image_detail_handler
      Events:
        ImageDetailApi:
          Type: Api
          Properties:
            Path: /images/{image_id}
            Method: get
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${ImageBucketName}/*"
            - Effect: "Allow"
              Action:
                - "dynamodb:GetItem"
              Resource: !GetAtt ImageMetadataTable.Arn

  ImageDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: image_handlers.image_delete_handler
      Events:
        ImageDeleteApi:
          Type: Api
          Properties:
            Path: /images/{image_id}
            Method: delete
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:DeleteObject"
              Resource: !Sub "arn:aws:s3:::${ImageBucketName}/*"
            - Effect: "Allow"
              Action:
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
              Resource: 
                - !GetAtt ImageMetadataTable.Arn
                - !GetAtt UserUsageTable.Arn
            - Effect: "Allow"
              Action:
                - "s3vectors:DeleteVectors"
              Resource: "*"

  ImageQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: image_handlers.image_query_handler
      Events:
        ImageQueryApi:
          Type: Api
          Properties:
            Path: /images/query
            Method: post
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "bedrock:InvokeModel"
                - "s3vectors:QueryVectors"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
              Resource: !GetAtt ImageMetadataTable.Arn

  ImageStatisticsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: image_handlers.image_statistics_handler
      Events:
        ImageStatisticsApi:
          Type: Api
          Properties:
            Path: /images/statistics
            Method: get
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:Scan"
              Resource: 
                - !GetAtt ImageMetadataTable.Arn
                - !GetAtt UserUsageTable.Arn

  # Quota management Lambda Functions
  QuotaStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: multi_tenant_handlers.user_quota_status_handler
      Events:
        QuotaStatusApi:
          Type: Api
          Properties:
            Path: /quota/status
            Method: get
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
              Resource: 
                - !GetAtt UserQuotaTable.Arn
                - !GetAtt UserUsageTable.Arn

  PlanUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: multi_tenant_handlers.user_plan_update_handler
      Events:
        PlanUpdateApi:
          Type: Api
          Properties:
            Path: /quota/plan
            Method: put
            RestApiId: !Ref RagApiGateway
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
              Resource: !GetAtt UserQuotaTable.Arn

  # CORS Options Handler for all endpoints
  OptionsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: multi_tenant_handlers.options_handler
      Events:
        # Legacy endpoints options
        QueryOptions:
          Type: Api
          Properties:
            Path: /query
            Method: options
            RestApiId: !Ref RagApiGateway
        AddDocumentOptions:
          Type: Api
          Properties:
            Path: /add-document
            Method: options
            RestApiId: !Ref RagApiGateway
        # Multi-tenant endpoints options
        UserQueryOptions:
          Type: Api
          Properties:
            Path: /users/{user_id}/query
            Method: options
            RestApiId: !Ref RagApiGateway
        UserDocumentsOptions:
          Type: Api
          Properties:
            Path: /users/{user_id}/documents
            Method: options
            RestApiId: !Ref RagApiGateway
        UserDocumentDeleteOptions:
          Type: Api
          Properties:
            Path: /users/{user_id}/documents/{document_id}
            Method: options
            RestApiId: !Ref RagApiGateway
        # Image endpoints options
        ImagesOptions:
          Type: Api
          Properties:
            Path: /images
            Method: options
            RestApiId: !Ref RagApiGateway
        ImageDetailOptions:
          Type: Api
          Properties:
            Path: /images/{image_id}
            Method: options
            RestApiId: !Ref RagApiGateway
        ImageQueryOptions:
          Type: Api
          Properties:
            Path: /images/query
            Method: options
            RestApiId: !Ref RagApiGateway
        ImageStatisticsOptions:
          Type: Api
          Properties:
            Path: /images/statistics
            Method: options
            RestApiId: !Ref RagApiGateway
        # Quota endpoints options
        QuotaStatusOptions:
          Type: Api
          Properties:
            Path: /quota/status
            Method: options
            RestApiId: !Ref RagApiGateway
        PlanUpdateOptions:
          Type: Api
          Properties:
            Path: /quota/plan
            Method: options
            RestApiId: !Ref RagApiGateway

Outputs:
  # Cognito Information
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref RAGUserPool
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-id"
  
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref RAGUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-client-id"

  RAGApiBaseUrl:
    Description: "API Gateway base URL for RAG system"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: !Sub "${AWS::StackName}-api-base-url"
  
  # Legacy endpoints
  RAGQueryEndpoint:
    Description: "RAG Query endpoint URL (legacy)"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/query"
    Export:
      Name: !Sub "${AWS::StackName}-query-endpoint"
  
  AddDocumentEndpoint:
    Description: "Add Document endpoint URL (legacy)"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/add-document"
    Export:
      Name: !Sub "${AWS::StackName}-add-document-endpoint"
  
  # Multi-tenant endpoints
  UserQueryEndpoint:
    Description: "User Query endpoint URL template"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/{user_id}/query"
    Export:
      Name: !Sub "${AWS::StackName}-user-query-endpoint"
  
  UserDocumentsEndpoint:
    Description: "User Documents endpoint URL template"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/{user_id}/documents"
    Export:
      Name: !Sub "${AWS::StackName}-user-documents-endpoint"
  
  UserDocumentDeleteEndpoint:
    Description: "User Document Delete endpoint URL template"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/{user_id}/documents/{document_id}"
    Export:
      Name: !Sub "${AWS::StackName}-user-document-delete-endpoint"
  
  # Lambda Function ARNs
  RAGQueryFunctionArn:
    Description: "RAG Query Lambda Function ARN"
    Value: !GetAtt RAGQueryFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-query-function-arn"
  
  AddDocumentFunctionArn:
    Description: "Add Document Lambda Function ARN"
    Value: !GetAtt AddDocumentFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-add-document-function-arn"
  
  UserQueryFunctionArn:
    Description: "User Query Lambda Function ARN"
    Value: !GetAtt UserQueryFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-user-query-function-arn"
  
  UserAddDocumentFunctionArn:
    Description: "User Add Document Lambda Function ARN"
    Value: !GetAtt UserAddDocumentFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-user-add-document-function-arn"
  
  UserDocumentListFunctionArn:
    Description: "User Document List Lambda Function ARN"
    Value: !GetAtt UserDocumentListFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-user-document-list-function-arn"
  
  UserDocumentDeleteFunctionArn:
    Description: "User Document Delete Lambda Function ARN"
    Value: !GetAtt UserDocumentDeleteFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-user-document-delete-function-arn"
  
  # Image processing function ARNs
  ImageUploadFunctionArn:
    Description: "Image Upload Lambda Function ARN"
    Value: !GetAtt ImageUploadFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-image-upload-function-arn"
  
  ImageListFunctionArn:
    Description: "Image List Lambda Function ARN"
    Value: !GetAtt ImageListFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-image-list-function-arn"
  
  ImageDetailFunctionArn:
    Description: "Image Detail Lambda Function ARN"
    Value: !GetAtt ImageDetailFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-image-detail-function-arn"
  
  ImageDeleteFunctionArn:
    Description: "Image Delete Lambda Function ARN"
    Value: !GetAtt ImageDeleteFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-image-delete-function-arn"
  
  ImageQueryFunctionArn:
    Description: "Image Query Lambda Function ARN"
    Value: !GetAtt ImageQueryFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-image-query-function-arn"
  
  ImageStatisticsFunctionArn:
    Description: "Image Statistics Lambda Function ARN"
    Value: !GetAtt ImageStatisticsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-image-statistics-function-arn"
  
  # Quota management function ARNs
  QuotaStatusFunctionArn:
    Description: "Quota Status Lambda Function ARN"
    Value: !GetAtt QuotaStatusFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-quota-status-function-arn"
  
  PlanUpdateFunctionArn:
    Description: "Plan Update Lambda Function ARN"
    Value: !GetAtt PlanUpdateFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-plan-update-function-arn"
  
  # Image processing endpoint URLs
  ImageUploadEndpoint:
    Description: "Image Upload endpoint URL"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/images"
    Export:
      Name: !Sub "${AWS::StackName}-image-upload-endpoint"
  
  ImageListEndpoint:
    Description: "Image List endpoint URL"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/images"
    Export:
      Name: !Sub "${AWS::StackName}-image-list-endpoint"
  
  ImageDetailEndpoint:
    Description: "Image Detail endpoint URL template"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/images/{image_id}"
    Export:
      Name: !Sub "${AWS::StackName}-image-detail-endpoint"
  
  ImageQueryEndpoint:
    Description: "Image Query endpoint URL"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/images/query"
    Export:
      Name: !Sub "${AWS::StackName}-image-query-endpoint"
  
  ImageStatisticsEndpoint:
    Description: "Image Statistics endpoint URL"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/images/statistics"
    Export:
      Name: !Sub "${AWS::StackName}-image-statistics-endpoint"
  
  # Quota management endpoint URLs
  QuotaStatusEndpoint:
    Description: "Quota Status endpoint URL"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/quota/status"
    Export:
      Name: !Sub "${AWS::StackName}-quota-status-endpoint"
  
  PlanUpdateEndpoint:
    Description: "Plan Update endpoint URL"
    Value: !Sub "https://${RagApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/quota/plan"
    Export:
      Name: !Sub "${AWS::StackName}-plan-update-endpoint"
  
  # AWS Resource Information
  ImageBucketName:
    Description: "S3 Bucket name for image storage"
    Value: !Ref ImageBucket
    Export:
      Name: !Sub "${AWS::StackName}-image-bucket-name"
  
  ImageMetadataTableName:
    Description: "DynamoDB Table name for image metadata"
    Value: !Ref ImageMetadataTable
    Export:
      Name: !Sub "${AWS::StackName}-image-metadata-table-name"
  
  UserQuotaTableName:
    Description: "DynamoDB Table name for user quotas"
    Value: !Ref UserQuotaTable
    Export:
      Name: !Sub "${AWS::StackName}-user-quota-table-name"
  
  UserUsageTableName:
    Description: "DynamoDB Table name for user usage"
    Value: !Ref UserUsageTable
    Export:
      Name: !Sub "${AWS::StackName}-user-usage-table-name"